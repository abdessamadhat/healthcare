# healthcare_complete.py - Application Streamlit Compl√®te
# Int√®gre EDA + Pr√©diction de la qualit√© des soins

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pickle
from scipy import stats
from scipy.stats import mannwhitneyu, pearsonr
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.metrics import (
    classification_report, confusion_matrix, roc_auc_score, roc_curve,
    precision_recall_curve, average_precision_score, accuracy_score,
    precision_score, recall_score, f1_score, matthews_corrcoef,
    balanced_accuracy_score, cohen_kappa_score
)
from sklearn.calibration import calibration_curve
import warnings

warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="Healthcare Analytics & Prediction",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Style CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.8rem;
        color: #ff7f0e;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .highlight-box {
        background-color: #e1f5fe;
        padding: 1rem;
        border-left: 4px solid #2196f3;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """Chargement des donn√©es avec cache"""
    try:
        df = pd.read_csv("Quality.csv")
        # Conversion des types
        if df['StartedOnCombination'].dtype == 'object':
            df['StartedOnCombination'] = df['StartedOnCombination'].map({'FALSE': 0, 'TRUE': 1})
        return df
    except FileNotFoundError:
        st.error("‚ùå Fichier Quality.csv non trouv√©!")
        return None

@st.cache_resource
def load_model():
    """Chargement du mod√®le avec cache"""
    try:
        with open("model_A.pkl", "rb") as f:
            saved = pickle.load(f)
        return saved["model"], saved["features"]
    except FileNotFoundError:
        st.error("‚ùå Mod√®le model_A.pkl non trouv√©! Veuillez d'abord entra√Æner le mod√®le.")
        return None, None

def overview_section(df):
    """Section Vue d'ensemble"""
    st.markdown('<h2 class="section-header">üìä Vue d\'ensemble du Dataset</h2>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìà Nombre de patients", df.shape[0])
    with col2:
        st.metric("üìä Nombre de variables", df.shape[1])
    with col3:
        poor_care_pct = (df['PoorCare'].sum() / len(df)) * 100
        st.metric("‚ö†Ô∏è Taux PoorCare", f"{poor_care_pct:.1f}%")
    with col4:
        missing_pct = (df.isnull().sum().sum() / (df.shape[0] * df.shape[1])) * 100
        st.metric("üîç Valeurs manquantes", f"{missing_pct:.1f}%")
    
    # Aper√ßu des donn√©es
    st.subheader("üëÄ Aper√ßu des donn√©es")
    st.dataframe(df.head(10))
    
    # Informations sur les colonnes
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã Informations sur les colonnes")
        info_df = pd.DataFrame({
            'Type': df.dtypes.astype(str),
            'Non-null': df.count(),
            'Null': df.isnull().sum()
        })
        st.dataframe(info_df)
    
    with col2:
        st.subheader("üéØ Distribution de la variable cible")
        target_counts = df['PoorCare'].value_counts()
        
        fig = px.pie(
            values=target_counts.values,
            names=['Bonne qualit√© (0)', 'Mauvaise qualit√© (1)'],
            title="Distribution PoorCare",
            color_discrete_sequence=['lightgreen', 'lightcoral']
        )
        st.plotly_chart(fig, use_container_width=True)

def descriptive_stats_section(df):
    """Section Statistiques descriptives"""
    st.markdown('<h2 class="section-header">üìà Statistiques Descriptives</h2>', unsafe_allow_html=True)
    
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    if 'MemberID' in numeric_cols:
        numeric_cols.remove('MemberID')
    
    # Statistiques de base
    st.subheader("üìä Statistiques de base")
    desc_stats = df[numeric_cols].describe()
    st.dataframe(desc_stats, use_container_width=True)
    
    # Statistiques avanc√©es
    st.subheader("üî¨ Statistiques avanc√©es")
    advanced_stats = pd.DataFrame({
        'M√©diane': df[numeric_cols].median(),
        'Mode': df[numeric_cols].mode().iloc[0],
        'Asym√©trie': df[numeric_cols].skew(),
        'Aplatissement': df[numeric_cols].kurtosis(),
        'Variance': df[numeric_cols].var()
    })
    st.dataframe(advanced_stats, use_container_width=True)
    
    # Distributions
    st.subheader("üìä Distributions des variables")
    
    selected_vars = st.multiselect(
        "S√©lectionnez les variables √† visualiser:",
        numeric_cols,
        default=numeric_cols[:3]
    )
    
    if selected_vars:
        for var in selected_vars:
            col1, col2 = st.columns(2)
            
            with col1:
                # Histogramme
                fig, ax = plt.subplots(figsize=(8, 5))
                ax.hist(df[var], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
                ax.set_title(f'Distribution de {var}')
                ax.set_xlabel(var)
                ax.set_ylabel('Fr√©quence')
                ax.grid(True, alpha=0.3)
                
                # Statistiques sur le graphique
                mean_val = df[var].mean()
                median_val = df[var].median()
                ax.axvline(mean_val, color='red', linestyle='--', label=f'Moyenne: {mean_val:.2f}')
                ax.axvline(median_val, color='green', linestyle='--', label=f'M√©diane: {median_val:.2f}')
                ax.legend()
                
                st.pyplot(fig)
            
            with col2:
                # Boxplot
                fig = px.box(df, y=var, title=f'Boxplot de {var}')
                st.plotly_chart(fig, use_container_width=True)

def correlation_analysis_section(df):
    """Section Analyse des corr√©lations"""
    st.markdown('<h2 class="section-header">üîó Analyse des Corr√©lations</h2>', unsafe_allow_html=True)
    
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    if 'MemberID' in numeric_cols:
        numeric_cols.remove('MemberID')
    
    # Matrice de corr√©lation
    corr_matrix = df[numeric_cols].corr()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Matrice de corr√©lation")
        fig, ax = plt.subplots(figsize=(8, 6))
        mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
        sns.heatmap(corr_matrix, mask=mask, annot=True, cmap='RdBu_r', center=0,
                    square=True, fmt='.3f', ax=ax)
        ax.set_title('Matrice de corr√©lation')
        st.pyplot(fig)
    
    with col2:
        st.subheader("üéØ Corr√©lations avec PoorCare")
        target_corr = corr_matrix['PoorCare'].drop('PoorCare').sort_values(key=abs, ascending=False)
        
        # Graphique en barres des corr√©lations
        fig = px.bar(
            x=target_corr.values,
            y=target_corr.index,
            orientation='h',
            title="Corr√©lations avec PoorCare",
            color=target_corr.values,
            color_continuous_scale='RdBu_r'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Table des corr√©lations
        corr_df = pd.DataFrame({
            'Variable': target_corr.index,
            'Corr√©lation': target_corr.values,
            'Force': [
                "Tr√®s forte" if abs(x) > 0.7 else
                "Forte" if abs(x) > 0.5 else
                "Mod√©r√©e" if abs(x) > 0.3 else
                "Faible" if abs(x) > 0.1 else
                "Tr√®s faible"
                for x in target_corr.values
            ]
        })
        st.dataframe(corr_df, use_container_width=True)

def outlier_analysis_section(df):
    """Section Analyse des outliers"""
    st.markdown('<h2 class="section-header">üîç Analyse des Valeurs Aberrantes</h2>', unsafe_allow_html=True)
    
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    if 'MemberID' in numeric_cols:
        numeric_cols.remove('MemberID')
    if 'PoorCare' in numeric_cols:
        numeric_cols.remove('PoorCare')
    
    outlier_summary = []
    
    for col in numeric_cols:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)][col]
        n_outliers = len(outliers)
        outlier_percentage = (n_outliers / len(df)) * 100
        
        outlier_summary.append({
            'Variable': col,
            'Q1': Q1,
            'Q3': Q3,
            'IQR': IQR,
            'Limite_inf': lower_bound,
            'Limite_sup': upper_bound,
            'Nb_outliers': n_outliers,
            'Pourcentage': outlier_percentage
        })
    
    outlier_df = pd.DataFrame(outlier_summary)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä R√©sum√© des outliers")
        st.dataframe(outlier_df, use_container_width=True)
    
    with col2:
        st.subheader("üìà Visualisation des outliers")
        selected_var = st.selectbox("S√©lectionnez une variable:", numeric_cols)
        
        if selected_var:
            fig = px.box(df, y=selected_var, title=f'Boxplot de {selected_var}')
            st.plotly_chart(fig, use_container_width=True)

def bivariate_analysis_section(df):
    """Section Analyse bivari√©e"""
    st.markdown('<h2 class="section-header">üìà Analyse Bivari√©e (Variables vs PoorCare)</h2>', unsafe_allow_html=True)
    
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    if 'MemberID' in numeric_cols:
        numeric_cols.remove('MemberID')
    if 'PoorCare' in numeric_cols:
        numeric_cols.remove('PoorCare')
    
    # Tests statistiques
    st.subheader("üî¨ Tests statistiques (Mann-Whitney U)")
    
    test_results = []
    for col in numeric_cols:
        group_0 = df[df['PoorCare'] == 0][col]
        group_1 = df[df['PoorCare'] == 1][col]
        
        statistic, p_value = mannwhitneyu(group_0, group_1, alternative='two-sided')
        
        test_results.append({
            'Variable': col,
            'M√©diane_PoorCare_0': group_0.median(),
            'M√©diane_PoorCare_1': group_1.median(),
            'Statistique_U': statistic,
            'p_value': p_value,
            'Significatif': 'Oui' if p_value < 0.05 else 'Non'
        })
    
    test_df = pd.DataFrame(test_results)
    st.dataframe(test_df, use_container_width=True)
    
    # Visualisations comparatives
    st.subheader("üìä Comparaisons visuelles par classe")
    
    selected_vars_biv = st.multiselect(
        "S√©lectionnez les variables √† comparer:",
        numeric_cols,
        default=numeric_cols[:2]
    )
    
    if selected_vars_biv:
        for var in selected_vars_biv:
            col1, col2 = st.columns(2)
            
            with col1:
                # Boxplot par classe
                fig = px.box(df, x='PoorCare', y=var, 
                           title=f'{var} par PoorCare',
                           color='PoorCare',
                           color_discrete_sequence=['lightgreen', 'lightcoral'])
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Violin plot
                fig = px.violin(df, x='PoorCare', y=var,
                              title=f'Distribution de {var} par PoorCare',
                              color='PoorCare',
                              color_discrete_sequence=['lightgreen', 'lightcoral'])
                st.plotly_chart(fig, use_container_width=True)

def prediction_section(df):
    """Section Pr√©diction"""
    st.markdown('<h2 class="section-header">üîÆ Pr√©diction de la Qualit√© des Soins</h2>', unsafe_allow_html=True)
    
    # Charger le mod√®le
    model, feature_cols = load_model()
    
    if model is None:
        st.error("‚ùå Mod√®le non disponible. Veuillez d'abord entra√Æner le mod√®le avec logreg.py")
        return
    
    st.success("‚úÖ Mod√®le charg√© avec succ√®s!")
    
    # Interface de pr√©diction
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üìù Param√®tres d'entr√©e")
        
        # Inputs pour les features
        ERVisits = st.slider("ERVisits", 0, 20, 1)
        OfficeVisits = st.slider("OfficeVisits", 0, 60, 13)
        Narcotics = st.slider("Narcotics", 0, 100, 4)
        ProviderCount = st.slider("ProviderCount", 1, 120, 23)
        NumberClaims = st.slider("NumberClaims", 0, 400, 43)
        StartedOnCombination = st.selectbox("StartedOnCombination", [0, 1], index=1)
        
        st.subheader("‚öôÔ∏è Param√®tres du mod√®le")
        threshold = st.slider("Seuil de d√©cision", 0.0, 1.0, 0.5, 0.01)
        
        # Pr√©parer les donn√©es d'entr√©e
        user_input = pd.DataFrame({
            "ERVisits": [ERVisits],
            "OfficeVisits": [OfficeVisits],
            "Narcotics": [Narcotics],
            "ProviderCount": [ProviderCount],
            "NumberClaims": [NumberClaims],
            "StartedOnCombination": [int(StartedOnCombination)],
        })[feature_cols]
        
        st.subheader("üìä Vos entr√©es")
        st.dataframe(user_input, use_container_width=True)
    
    with col2:
        st.subheader("üéØ R√©sultats de pr√©diction")
        
        if st.button("üîÆ Pr√©dire", type="primary"):
            # Pr√©diction
            proba = float(model.predict_proba(user_input)[0, 1])
            y_pred = int(proba >= threshold)
            
            # Affichage des r√©sultats
            col2a, col2b = st.columns(2)
            
            with col2a:
                st.metric(
                    "Probabilit√© PoorCare",
                    f"{proba:.3f}",
                    f"Seuil: {threshold}"
                )
            
            with col2b:
                if y_pred == 1:
                    st.error(f"‚ö†Ô∏è Pr√©diction: RISQUE √âLEV√â")
                else:
                    st.success(f"‚úÖ Pr√©diction: RISQUE FAIBLE")
            
            # Graphique de probabilit√©
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = proba,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "Probabilit√© de PoorCare"},
                gauge = {
                    'axis': {'range': [None, 1]},
                    'bar': {'color': "darkblue"},
                    'steps': [
                        {'range': [0, 0.5], 'color': "lightgreen"},
                        {'range': [0.5, 1], 'color': "lightcoral"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': threshold
                    }
                }
            ))
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
            
            # D√©tails techniques
            with st.expander("üîß D√©tails techniques"):
                st.write("**Caract√©ristiques du mod√®le:**")
                st.write("- Algorithme: R√©gression Logistique")
                st.write("- Pr√©processing: StandardScaler")
                st.write("- Solver: liblinear")
                st.write("- Class weight: balanced")
                st.write(f"- Seuil de d√©cision: {threshold}")
                st.write(f"- Features utilis√©es: {', '.join(feature_cols)}")
        
        # Analyse comparative avec le dataset
        st.subheader("üìä Comparaison avec le dataset")
        
        # Percentiles des valeurs entr√©es
        percentiles_df = pd.DataFrame({
            'Variable': feature_cols,
            'Votre valeur': [
                ERVisits, OfficeVisits, Narcotics, 
                ProviderCount, NumberClaims, StartedOnCombination
            ],
            'Percentile': [
                stats.percentileofscore(df[col], val) 
                for col, val in zip(feature_cols, [
                    ERVisits, OfficeVisits, Narcotics,
                    ProviderCount, NumberClaims, StartedOnCombination
                ])
            ]
        })
        
        st.dataframe(percentiles_df, use_container_width=True)

def model_performance_section(df):
    """Section Analyse de performance du mod√®le"""
    st.markdown('<h2 class="section-header">üéØ Analyse de Performance du Mod√®le</h2>', unsafe_allow_html=True)
    
    # Charger le mod√®le
    model, feature_cols = load_model()
    
    if model is None:
        st.error("‚ùå Mod√®le non disponible. Veuillez d'abord entra√Æner le mod√®le avec logreg.py")
        return
    
    st.success("‚úÖ Mod√®le charg√© avec succ√®s!")
    
    # Pr√©parer les donn√©es
    X = df[feature_cols]
    y = df['PoorCare']
    
    # Division train/test (m√™me que dans logreg.py)
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.25, random_state=0, stratify=y
    )
    
    # Pr√©dictions
    y_pred = model.predict(X_test)
    y_pred_proba = model.predict_proba(X_test)[:, 1]
    
    # Seuil personnalisable
    st.subheader("‚öôÔ∏è Configuration du seuil")
    threshold = st.slider("Seuil de d√©cision pour l'analyse", 0.0, 1.0, 0.5, 0.01)
    y_pred_custom = (y_pred_proba >= threshold).astype(int)
    
    # M√©triques de base
    st.subheader("üìä M√©triques de Performance")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        accuracy = accuracy_score(y_test, y_pred_custom)
        st.metric("üéØ Accuracy", f"{accuracy:.3f}")
    
    with col2:
        precision = precision_score(y_test, y_pred_custom, zero_division=0)
        st.metric("üîç Precision", f"{precision:.3f}")
    
    with col3:
        recall = recall_score(y_test, y_pred_custom, zero_division=0)
        st.metric("üì° Recall", f"{recall:.3f}")
    
    with col4:
        f1 = f1_score(y_test, y_pred_custom, zero_division=0)
        st.metric("‚öñÔ∏è F1-Score", f"{f1:.3f}")
    
    # M√©triques avanc√©es
    st.subheader("üî¨ M√©triques Avanc√©es")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        roc_auc = roc_auc_score(y_test, y_pred_proba)
        st.metric("üìà ROC-AUC", f"{roc_auc:.3f}")
    
    with col2:
        avg_precision = average_precision_score(y_test, y_pred_proba)
        st.metric("üìä AP Score", f"{avg_precision:.3f}")
    
    with col3:
        balanced_acc = balanced_accuracy_score(y_test, y_pred_custom)
        st.metric("‚öñÔ∏è Balanced Acc", f"{balanced_acc:.3f}")
    
    with col4:
        mcc = matthews_corrcoef(y_test, y_pred_custom)
        st.metric("üîó MCC", f"{mcc:.3f}")
    
    # Matrice de confusion
    st.subheader("üé≠ Matrice de Confusion")
    
    col1, col2 = st.columns(2)
    
    with col1:
        cm = confusion_matrix(y_test, y_pred_custom)
        
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax,
                    xticklabels=['Pr√©dite: Bonne', 'Pr√©dite: Mauvaise'],
                    yticklabels=['R√©elle: Bonne', 'R√©elle: Mauvaise'])
        ax.set_title(f'Matrice de Confusion (Seuil: {threshold})')
        ax.set_ylabel('Valeurs R√©elles')
        ax.set_xlabel('Valeurs Pr√©dites')
        st.pyplot(fig)
    
    with col2:
        # Calculs d√©taill√©s de la matrice de confusion
        tn, fp, fn, tp = cm.ravel()
        
        st.write("**üìã D√©tails de la Matrice:**")
        st.write(f"‚Ä¢ Vrais N√©gatifs (TN): {tn}")
        st.write(f"‚Ä¢ Faux Positifs (FP): {fp}")
        st.write(f"‚Ä¢ Faux N√©gatifs (FN): {fn}")
        st.write(f"‚Ä¢ Vrais Positifs (TP): {tp}")
        
        st.write("**üìà Calculs d√©riv√©s:**")
        specificity = tn / (tn + fp) if (tn + fp) > 0 else 0
        sensitivity = tp / (tp + fn) if (tp + fn) > 0 else 0
        ppv = tp / (tp + fp) if (tp + fp) > 0 else 0
        npv = tn / (tn + fn) if (tn + fn) > 0 else 0
        
        st.write(f"‚Ä¢ Sp√©cificit√©: {specificity:.3f}")
        st.write(f"‚Ä¢ Sensibilit√©: {sensitivity:.3f}")
        st.write(f"‚Ä¢ VPP (PPV): {ppv:.3f}")
        st.write(f"‚Ä¢ VPN (NPV): {npv:.3f}")
    
    # Courbes ROC et Precision-Recall
    st.subheader("üìà Courbes de Performance")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Courbe ROC
        fpr, tpr, roc_thresholds = roc_curve(y_test, y_pred_proba)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=fpr, y=tpr,
            mode='lines',
            name=f'ROC Curve (AUC = {roc_auc:.3f})',
            line=dict(color='blue', width=2)
        ))
        fig.add_trace(go.Scatter(
            x=[0, 1], y=[0, 1],
            mode='lines',
            name='Random Classifier',
            line=dict(color='red', dash='dash')
        ))
        
        # Point pour le seuil actuel
        if len(roc_thresholds) > 0:
            threshold_idx = np.argmin(np.abs(roc_thresholds - threshold))
            fig.add_trace(go.Scatter(
                x=[fpr[threshold_idx]], y=[tpr[threshold_idx]],
                mode='markers',
                name=f'Seuil {threshold}',
                marker=dict(color='orange', size=10)
            ))
        
        fig.update_layout(
            title='Courbe ROC',
            xaxis_title='Taux de Faux Positifs',
            yaxis_title='Taux de Vrais Positifs',
            showlegend=True
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Courbe Precision-Recall
        precision_curve, recall_curve, pr_thresholds = precision_recall_curve(y_test, y_pred_proba)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=recall_curve, y=precision_curve,
            mode='lines',
            name=f'PR Curve (AP = {avg_precision:.3f})',
            line=dict(color='green', width=2)
        ))
        
        # Ligne de base (proportion de positifs)
        baseline = y_test.mean()
        fig.add_hline(y=baseline, line_dash="dash", line_color="red",
                      annotation_text=f"Baseline ({baseline:.3f})")
        
        fig.update_layout(
            title='Courbe Pr√©cision-Rappel',
            xaxis_title='Rappel',
            yaxis_title='Pr√©cision',
            showlegend=True
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Distribution des scores de probabilit√©
    st.subheader("üìä Distribution des Scores de Probabilit√©")
    
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # Histogrammes s√©par√©s par classe
    y_pred_proba_0 = y_pred_proba[y_test == 0]
    y_pred_proba_1 = y_pred_proba[y_test == 1]
    
    ax.hist(y_pred_proba_0, bins=20, alpha=0.7, label='PoorCare = 0', color='lightgreen', density=True)
    ax.hist(y_pred_proba_1, bins=20, alpha=0.7, label='PoorCare = 1', color='lightcoral', density=True)
    ax.axvline(threshold, color='red', linestyle='--', linewidth=2, label=f'Seuil = {threshold}')
    
    ax.set_xlabel('Probabilit√© Pr√©dite')
    ax.set_ylabel('Densit√©')
    ax.set_title('Distribution des Probabilit√©s par Classe R√©elle')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    st.pyplot(fig)
    
    # Validation crois√©e
    st.subheader("üîÑ Validation Crois√©e")
    
    with st.spinner("Ex√©cution de la validation crois√©e..."):
        cv_folds = st.selectbox("Nombre de folds:", [3, 5, 10], index=1)
        
        skf = StratifiedKFold(n_splits=cv_folds, shuffle=True, random_state=42)
        
        # Diff√©rentes m√©triques
        cv_scores = {
            'accuracy': cross_val_score(model, X, y, cv=skf, scoring='accuracy'),
            'precision': cross_val_score(model, X, y, cv=skf, scoring='precision'),
            'recall': cross_val_score(model, X, y, cv=skf, scoring='recall'),
            'f1': cross_val_score(model, X, y, cv=skf, scoring='f1'),
            'roc_auc': cross_val_score(model, X, y, cv=skf, scoring='roc_auc')
        }
        
        cv_df = pd.DataFrame({
            'M√©trique': ['Accuracy', 'Precision', 'Recall', 'F1-Score', 'ROC-AUC'],
            'Moyenne': [scores.mean() for scores in cv_scores.values()],
            '√âcart-type': [scores.std() for scores in cv_scores.values()],
            'Min': [scores.min() for scores in cv_scores.values()],
            'Max': [scores.max() for scores in cv_scores.values()]
        })
        
        st.dataframe(cv_df)
        
        # Graphique des scores CV
        fig, ax = plt.subplots(figsize=(12, 6))
        
        metrics = list(cv_scores.keys())
        means = [scores.mean() for scores in cv_scores.values()]
        stds = [scores.std() for scores in cv_scores.values()]
        
        bars = ax.bar(metrics, means, yerr=stds, capsize=5, alpha=0.7, color='skyblue')
        ax.set_ylabel('Score')
        ax.set_title('Scores de Validation Crois√©e avec Intervalles de Confiance')
        ax.grid(True, alpha=0.3)
        
        # Ajouter les valeurs sur les barres
        for bar, mean, std in zip(bars, means, stds):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + std + 0.01,
                   f'{mean:.3f}¬±{std:.3f}', ha='center', va='bottom')
        
        st.pyplot(fig)
    
    # Rapport de classification d√©taill√©
    st.subheader("üìã Rapport de Classification D√©taill√©")
    
    report = classification_report(y_test, y_pred_custom, output_dict=True)
    
    # Convertir en DataFrame pour un meilleur affichage
    report_df = pd.DataFrame(report).transpose()
    report_df = report_df.round(3)
    
    st.dataframe(report_df)
    
    # Recommandations d'am√©lioration
    st.subheader("üí° Recommandations d'Am√©lioration")
    
    recommendations = []
    
    if accuracy < 0.8:
        recommendations.append("‚Ä¢ Accuracy faible - Consid√©rer d'autres algorithmes ou feature engineering")
    
    if precision < 0.7:
        recommendations.append("‚Ä¢ Pr√©cision faible - R√©duire les faux positifs, ajuster le seuil vers le haut")
    
    if recall < 0.7:
        recommendations.append("‚Ä¢ Rappel faible - R√©duire les faux n√©gatifs, ajuster le seuil vers le bas")
    
    if roc_auc < 0.8:
        recommendations.append("‚Ä¢ ROC-AUC faible - Le mod√®le a du mal √† distinguer les classes")
    
    if mcc < 0.5:
        recommendations.append("‚Ä¢ MCC faible - Performance globale m√©diocre, revoir l'approche")
    
    if len(recommendations) == 0:
        recommendations.append("‚úÖ Performance globale satisfaisante!")
        recommendations.append("‚Ä¢ Consid√©rer la validation sur de nouvelles donn√©es")
        recommendations.append("‚Ä¢ Surveiller la d√©rive du mod√®le en production")
    
    for rec in recommendations:
        st.write(rec)

def main():
    """Fonction principale de l'application"""
    # En-t√™te
    st.markdown('<h1 class="main-header">üè• Healthcare Analytics & Prediction Platform</h1>', unsafe_allow_html=True)
    
    # Chargement des donn√©es
    df = load_data()
    if df is None:
        st.stop()
    
    # Sidebar pour navigation
    st.sidebar.title("üß≠ Navigation")
    sections = [
        "üìä Vue d'ensemble",
        "üìà Statistiques descriptives", 
        "üîó Analyse des corr√©lations",
        "üîç Analyse des outliers",
        "üìà Analyse bivari√©e",
        "üéØ Performance du mod√®le",
        "üîÆ Pr√©diction"
    ]
    
    selected_section = st.sidebar.selectbox("Choisissez une section:", sections)
    
    # Affichage de la section s√©lectionn√©e
    if selected_section == "üìä Vue d'ensemble":
        overview_section(df)
    elif selected_section == "üìà Statistiques descriptives":
        descriptive_stats_section(df)
    elif selected_section == "üîó Analyse des corr√©lations":
        correlation_analysis_section(df)
    elif selected_section == "üîç Analyse des outliers":
        outlier_analysis_section(df)
    elif selected_section == "üìà Analyse bivari√©e":
        bivariate_analysis_section(df)
    elif selected_section == "üéØ Performance du mod√®le":
        model_performance_section(df)
    elif selected_section == "üîÆ Pr√©diction":
        prediction_section(df)
    
    # Footer
    st.sidebar.markdown("---")
    st.sidebar.markdown("**üìã Informations dataset:**")
    st.sidebar.write(f"‚Ä¢ Patients: {df.shape[0]}")
    st.sidebar.write(f"‚Ä¢ Variables: {df.shape[1]}")
    st.sidebar.write(f"‚Ä¢ PoorCare: {df['PoorCare'].sum()}/{len(df)}")
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("**üîß Outils disponibles:**")
    st.sidebar.write("‚Ä¢ Analyse exploratoire compl√®te")
    st.sidebar.write("‚Ä¢ Pr√©diction en temps r√©el")
    st.sidebar.write("‚Ä¢ Visualisations interactives")
    st.sidebar.write("‚Ä¢ Tests statistiques")

if __name__ == "__main__":
    main()
